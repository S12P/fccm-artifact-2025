#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void compute_FT0_level0(
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_off_chip_to_S1,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_to_off_chip, int i0,
    float tmp_0[200], float tmp_1[200], float A[400][416], float x[416]) {
#pragma HLS inline off
#pragma HLS dataflow
  task0_intra(tmp_0, A, x, i0);
  task1_intra(tmp_0, A, x, i0);
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, i0 - 1);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, i0 - 1);
}
void FT0_level0(
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_off_chip_to_S1,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_to_off_chip) {
#pragma HLS inline off
  float tmp_0[200];
  // FT0
#pragma HLS array_partition variable = tmp_0 cyclic factor = 200 dim = 1
  float tmp_1[200];
  // FT0
#pragma HLS array_partition variable = tmp_1 cyclic factor = 200 dim = 1
  float A[400][416];
#pragma HLS array_partition variable = A cyclic factor = 200 dim = 1
#pragma HLS array_partition variable = A cyclic factor = 2 dim = 2
  float x[416];
#pragma HLS array_partition variable = x cyclic factor = 2 dim = 1
  read_A_FT0(A, fifo_A_from_off_chip_to_S1);
  read_x_FT0(x, fifo_x_from_off_chip_to_S1);
  for (int i0 = 0; i0 < 2; i0++) {

    if (i0 % 2 == 0) {
      //     task0_intra(tmp_0, A, x, i0);
      //     task1_intra(tmp_0, A, x, i0);
      //     write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, i0-1);
      //     write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, i0-1);
      compute_FT0_level0(fifo_tmp_from_task1_to_task3,
                         fifo_A_from_off_chip_to_S1, fifo_x_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, i0, tmp_0, tmp_1, A, x);
    } else if (i0 % 2 == 1) {
      //     task0_intra(tmp_1, A, x, i0);
      //     task1_intra(tmp_1, A, x, i0);
      //     write_tmp_FT0(tmp_0, fifo_tmp_from_task1_to_task3, i0-1);
      //     write_tmp_FT0(tmp_0, fifo_tmp_to_off_chip, i0-1);
      compute_FT0_level0(fifo_tmp_from_task1_to_task3,
                         fifo_A_from_off_chip_to_S1, fifo_x_from_off_chip_to_S1,
                         fifo_tmp_to_off_chip, i0, tmp_1, tmp_0, A, x);
    }
  }
  write_tmp_FT0(tmp_1, fifo_tmp_from_task1_to_task3, 1);
  write_tmp_FT0(tmp_1, fifo_tmp_to_off_chip, 1);
}
void task0_intra(float tmp[200], float A[400][416], float x[416], int i0) {
#pragma HLS inline off
  int i;
  for (int i1 = 0; i1 < 200; i1++) {
#pragma HLS unroll
    i = i0 * 200 + i1;
    tmp[i1] = 0.0;
  }
}
void task1_intra(float tmp[200], float A[400][416], float x[416], int i0) {
#pragma HLS inline off
  int i;
  int j;
  for (int j0 = 0; j0 < 208; j0++) {
#pragma HLS pipeline II = 2
    for (int i1 = 0; i1 < 200; i1++) {
#pragma HLS unroll
      for (int j1 = 0; j1 < 2; j1++) {
#pragma HLS unroll
        i = i0 * 200 + i1;
        j = j0 * 2 + j1;
        tmp[i1] = tmp[i1] + A[i][j] * x[j];
      }
    }
  }
}
void read_A_FT0(float A[400][416],
                hls::stream<float16> &fifo_A_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0++) {
    for (int d1 = 0; d1 < 416; d1 += 16) {
#pragma HLS pipeline II = 1
      float16 tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      A[d0 + 0][d1 + 0 + 0] = tmp_fifo[0];
      A[d0 + 0][d1 + 0 + 1] = tmp_fifo[1];
      A[d0 + 0][d1 + 0 + 2] = tmp_fifo[2];
      A[d0 + 0][d1 + 0 + 3] = tmp_fifo[3];
      A[d0 + 0][d1 + 0 + 4] = tmp_fifo[4];
      A[d0 + 0][d1 + 0 + 5] = tmp_fifo[5];
      A[d0 + 0][d1 + 0 + 6] = tmp_fifo[6];
      A[d0 + 0][d1 + 0 + 7] = tmp_fifo[7];
      A[d0 + 0][d1 + 0 + 8] = tmp_fifo[8];
      A[d0 + 0][d1 + 0 + 9] = tmp_fifo[9];
      A[d0 + 0][d1 + 0 + 10] = tmp_fifo[10];
      A[d0 + 0][d1 + 0 + 11] = tmp_fifo[11];
      A[d0 + 0][d1 + 0 + 12] = tmp_fifo[12];
      A[d0 + 0][d1 + 0 + 13] = tmp_fifo[13];
      A[d0 + 0][d1 + 0 + 14] = tmp_fifo[14];
      A[d0 + 0][d1 + 0 + 15] = tmp_fifo[15];
    }
  }
}
void read_A_FT0(
    float A[400][416],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 400; d0++) {
    for (int d1 = 0; d1 < 416; d1 += 16) {
#pragma HLS pipeline II = 1
      ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_A_from_off_chip_to_S1.read();
      uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
      A[d0 + 0][d1 + 0 + 0] = *(float *)(&tmp_0);
      uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
      A[d0 + 0][d1 + 0 + 1] = *(float *)(&tmp_1);
      uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
      A[d0 + 0][d1 + 0 + 2] = *(float *)(&tmp_2);
      uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
      A[d0 + 0][d1 + 0 + 3] = *(float *)(&tmp_3);
      uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
      A[d0 + 0][d1 + 0 + 4] = *(float *)(&tmp_4);
      uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
      A[d0 + 0][d1 + 0 + 5] = *(float *)(&tmp_5);
      uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
      A[d0 + 0][d1 + 0 + 6] = *(float *)(&tmp_6);
      uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
      A[d0 + 0][d1 + 0 + 7] = *(float *)(&tmp_7);
      uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
      A[d0 + 0][d1 + 0 + 8] = *(float *)(&tmp_8);
      uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
      A[d0 + 0][d1 + 0 + 9] = *(float *)(&tmp_9);
      uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
      A[d0 + 0][d1 + 0 + 10] = *(float *)(&tmp_10);
      uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
      A[d0 + 0][d1 + 0 + 11] = *(float *)(&tmp_11);
      uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
      A[d0 + 0][d1 + 0 + 12] = *(float *)(&tmp_12);
      uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
      A[d0 + 0][d1 + 0 + 13] = *(float *)(&tmp_13);
      uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
      A[d0 + 0][d1 + 0 + 14] = *(float *)(&tmp_14);
      uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
      A[d0 + 0][d1 + 0 + 15] = *(float *)(&tmp_15);
    }
  }
}
void read_x_FT0(float x[416],
                hls::stream<float16> &fifo_x_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 416; d0 += 16) {
#pragma HLS pipeline II = 1
    float16 tmp_fifo = fifo_x_from_off_chip_to_S1.read();
    x[d0 + 0 + 0] = tmp_fifo[0];
    x[d0 + 0 + 1] = tmp_fifo[1];
    x[d0 + 0 + 2] = tmp_fifo[2];
    x[d0 + 0 + 3] = tmp_fifo[3];
    x[d0 + 0 + 4] = tmp_fifo[4];
    x[d0 + 0 + 5] = tmp_fifo[5];
    x[d0 + 0 + 6] = tmp_fifo[6];
    x[d0 + 0 + 7] = tmp_fifo[7];
    x[d0 + 0 + 8] = tmp_fifo[8];
    x[d0 + 0 + 9] = tmp_fifo[9];
    x[d0 + 0 + 10] = tmp_fifo[10];
    x[d0 + 0 + 11] = tmp_fifo[11];
    x[d0 + 0 + 12] = tmp_fifo[12];
    x[d0 + 0 + 13] = tmp_fifo[13];
    x[d0 + 0 + 14] = tmp_fifo[14];
    x[d0 + 0 + 15] = tmp_fifo[15];
  }
}
void read_x_FT0(
    float x[416],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_off_chip_to_S1) {
#pragma HLS inline off
  for (int d0 = 0; d0 < 416; d0 += 16) {
#pragma HLS pipeline II = 1
    ap_axiu<512, 0, 0, 0> tmp_fifo = fifo_x_from_off_chip_to_S1.read();
    uint32_t tmp_0 = tmp_fifo.data.range(31, 0);
    x[d0 + 0 + 0] = *(float *)(&tmp_0);
    uint32_t tmp_1 = tmp_fifo.data.range(63, 32);
    x[d0 + 0 + 1] = *(float *)(&tmp_1);
    uint32_t tmp_2 = tmp_fifo.data.range(95, 64);
    x[d0 + 0 + 2] = *(float *)(&tmp_2);
    uint32_t tmp_3 = tmp_fifo.data.range(127, 96);
    x[d0 + 0 + 3] = *(float *)(&tmp_3);
    uint32_t tmp_4 = tmp_fifo.data.range(159, 128);
    x[d0 + 0 + 4] = *(float *)(&tmp_4);
    uint32_t tmp_5 = tmp_fifo.data.range(191, 160);
    x[d0 + 0 + 5] = *(float *)(&tmp_5);
    uint32_t tmp_6 = tmp_fifo.data.range(223, 192);
    x[d0 + 0 + 6] = *(float *)(&tmp_6);
    uint32_t tmp_7 = tmp_fifo.data.range(255, 224);
    x[d0 + 0 + 7] = *(float *)(&tmp_7);
    uint32_t tmp_8 = tmp_fifo.data.range(287, 256);
    x[d0 + 0 + 8] = *(float *)(&tmp_8);
    uint32_t tmp_9 = tmp_fifo.data.range(319, 288);
    x[d0 + 0 + 9] = *(float *)(&tmp_9);
    uint32_t tmp_10 = tmp_fifo.data.range(351, 320);
    x[d0 + 0 + 10] = *(float *)(&tmp_10);
    uint32_t tmp_11 = tmp_fifo.data.range(383, 352);
    x[d0 + 0 + 11] = *(float *)(&tmp_11);
    uint32_t tmp_12 = tmp_fifo.data.range(415, 384);
    x[d0 + 0 + 12] = *(float *)(&tmp_12);
    uint32_t tmp_13 = tmp_fifo.data.range(447, 416);
    x[d0 + 0 + 13] = *(float *)(&tmp_13);
    uint32_t tmp_14 = tmp_fifo.data.range(479, 448);
    x[d0 + 0 + 14] = *(float *)(&tmp_14);
    uint32_t tmp_15 = tmp_fifo.data.range(511, 480);
    x[d0 + 0 + 15] = *(float *)(&tmp_15);
  }
}
void write_tmp_FT0(float tmp[200],
                   hls::stream<float8> &fifo_tmp_from_task1_to_task3, int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 200; d0 += 8) {
#pragma HLS pipeline II = 1
    float8 tmp_fifo;
    tmp_fifo[0] = tmp[d0 + 0 + 0];
    tmp_fifo[1] = tmp[d0 + 0 + 1];
    tmp_fifo[2] = tmp[d0 + 0 + 2];
    tmp_fifo[3] = tmp[d0 + 0 + 3];
    tmp_fifo[4] = tmp[d0 + 0 + 4];
    tmp_fifo[5] = tmp[d0 + 0 + 5];
    tmp_fifo[6] = tmp[d0 + 0 + 6];
    tmp_fifo[7] = tmp[d0 + 0 + 7];
    fifo_tmp_from_task1_to_task3.write(tmp_fifo);
  }
}
void write_tmp_FT0(
    float tmp[200],
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3, int i0) {
#pragma HLS inline off
  if (i0 < 0) {
    return;
  }
  for (int d0 = 0; d0 < 200; d0 += 8) {
#pragma HLS pipeline II = 1
    ap_axiu<256, 0, 0, 0> tmp_fifo;
    float tmp_0 = tmp[d0 + 0 + 0];
    tmp_fifo.data.range(31, 0) = *(uint32_t *)(&tmp_0);
    float tmp_1 = tmp[d0 + 0 + 1];
    tmp_fifo.data.range(63, 32) = *(uint32_t *)(&tmp_1);
    float tmp_2 = tmp[d0 + 0 + 2];
    tmp_fifo.data.range(95, 64) = *(uint32_t *)(&tmp_2);
    float tmp_3 = tmp[d0 + 0 + 3];
    tmp_fifo.data.range(127, 96) = *(uint32_t *)(&tmp_3);
    float tmp_4 = tmp[d0 + 0 + 4];
    tmp_fifo.data.range(159, 128) = *(uint32_t *)(&tmp_4);
    float tmp_5 = tmp[d0 + 0 + 5];
    tmp_fifo.data.range(191, 160) = *(uint32_t *)(&tmp_5);
    float tmp_6 = tmp[d0 + 0 + 6];
    tmp_fifo.data.range(223, 192) = *(uint32_t *)(&tmp_6);
    float tmp_7 = tmp[d0 + 0 + 7];
    tmp_fifo.data.range(255, 224) = *(uint32_t *)(&tmp_7);
    fifo_tmp_from_task1_to_task3.write(tmp_fifo);
  }
}

void kernel_nlp_slr2(
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_from_task1_to_task3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_off_chip_to_S1,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_to_off_chip) {
#pragma HLS interface ap_ctrl_none port = return
#pragma HLS inline off
#pragma HLS INTERFACE axis port = fifo_A_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_x_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_tmp_to_off_chip
  FT0_level0(fifo_tmp_from_task1_to_task3, fifo_A_from_off_chip_to_S1,
             fifo_x_from_off_chip_to_S1, fifo_tmp_to_off_chip);
}
