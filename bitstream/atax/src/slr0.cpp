#include "output.h"

#define READ_RANGE(Arr, data_size, l)                                          \
  (Arr.data.range((data_size) * (l) + (data_size) - 1, (data_size) * (l)))

/****************************************************
 This file was automatically generated by Prometheus
****************************************************/
void load_vA_for_task3(hls::stream<float16> &fifo_A_from_off_chip_to_S3,
                       float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10192; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S3.write(vA[i]);
  }
}
void load_vA_for_task3(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
    float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10192; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S3.write(vA_on);
  }
}
void load_vA_for_task1(hls::stream<float16> &fifo_A_from_off_chip_to_S1,
                       float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10400; i++) {
#pragma HLS pipeline II = 1
    fifo_A_from_off_chip_to_S1.write(vA[i]);
  }
}
void load_vA_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    float16 vA[10400]) {
#pragma HLS inline off
  for (int i = 0; i < 10400; i++) {
#pragma HLS pipeline II = 1
    float16 vA_off = vA[i];
    ap_axiu<512, 0, 0, 0> vA_on;
    vA_on.data.range(31, 0) = *(uint32_t *)(&vA_off[0]);
    vA_on.data.range(63, 32) = *(uint32_t *)(&vA_off[1]);
    vA_on.data.range(95, 64) = *(uint32_t *)(&vA_off[2]);
    vA_on.data.range(127, 96) = *(uint32_t *)(&vA_off[3]);
    vA_on.data.range(159, 128) = *(uint32_t *)(&vA_off[4]);
    vA_on.data.range(191, 160) = *(uint32_t *)(&vA_off[5]);
    vA_on.data.range(223, 192) = *(uint32_t *)(&vA_off[6]);
    vA_on.data.range(255, 224) = *(uint32_t *)(&vA_off[7]);
    vA_on.data.range(287, 256) = *(uint32_t *)(&vA_off[8]);
    vA_on.data.range(319, 288) = *(uint32_t *)(&vA_off[9]);
    vA_on.data.range(351, 320) = *(uint32_t *)(&vA_off[10]);
    vA_on.data.range(383, 352) = *(uint32_t *)(&vA_off[11]);
    vA_on.data.range(415, 384) = *(uint32_t *)(&vA_off[12]);
    vA_on.data.range(447, 416) = *(uint32_t *)(&vA_off[13]);
    vA_on.data.range(479, 448) = *(uint32_t *)(&vA_off[14]);
    vA_on.data.range(511, 480) = *(uint32_t *)(&vA_off[15]);
    fifo_A_from_off_chip_to_S1.write(vA_on);
  }
}
void load_vx_for_task1(hls::stream<float16> &fifo_x_from_off_chip_to_S1,
                       float16 vx[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    fifo_x_from_off_chip_to_S1.write(vx[i]);
  }
}
void load_vx_for_task1(
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_off_chip_to_S1,
    float16 vx[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    float16 vx_off = vx[i];
    ap_axiu<512, 0, 0, 0> vx_on;
    vx_on.data.range(31, 0) = *(uint32_t *)(&vx_off[0]);
    vx_on.data.range(63, 32) = *(uint32_t *)(&vx_off[1]);
    vx_on.data.range(95, 64) = *(uint32_t *)(&vx_off[2]);
    vx_on.data.range(127, 96) = *(uint32_t *)(&vx_off[3]);
    vx_on.data.range(159, 128) = *(uint32_t *)(&vx_off[4]);
    vx_on.data.range(191, 160) = *(uint32_t *)(&vx_off[5]);
    vx_on.data.range(223, 192) = *(uint32_t *)(&vx_off[6]);
    vx_on.data.range(255, 224) = *(uint32_t *)(&vx_off[7]);
    vx_on.data.range(287, 256) = *(uint32_t *)(&vx_off[8]);
    vx_on.data.range(319, 288) = *(uint32_t *)(&vx_off[9]);
    vx_on.data.range(351, 320) = *(uint32_t *)(&vx_off[10]);
    vx_on.data.range(383, 352) = *(uint32_t *)(&vx_off[11]);
    vx_on.data.range(415, 384) = *(uint32_t *)(&vx_off[12]);
    vx_on.data.range(447, 416) = *(uint32_t *)(&vx_off[13]);
    vx_on.data.range(479, 448) = *(uint32_t *)(&vx_off[14]);
    vx_on.data.range(511, 480) = *(uint32_t *)(&vx_off[15]);
    fifo_x_from_off_chip_to_S1.write(vx_on);
  }
}
void store_vy_for_task3(hls::stream<float16> &fifo_y_to_off_chip,
                        float16 vy[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    vy[i] = fifo_y_to_off_chip.read();
  }
}
void store_vy_for_task3(hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_y_to_off_chip,
                        float16 vy[26]) {
#pragma HLS inline off
  for (int i = 0; i < 26; i++) {
#pragma HLS pipeline II = 1
    float16 vy_off;
    ap_axiu<512, 0, 0, 0> vy_on = fifo_y_to_off_chip.read();
    uint32_t vy_tmp[16];
    vy_tmp[0] = vy_on.data.range(31, 0);
    vy_off[0] = *(float *)(&vy_tmp[0]);
    vy_tmp[1] = vy_on.data.range(63, 32);
    vy_off[1] = *(float *)(&vy_tmp[1]);
    vy_tmp[2] = vy_on.data.range(95, 64);
    vy_off[2] = *(float *)(&vy_tmp[2]);
    vy_tmp[3] = vy_on.data.range(127, 96);
    vy_off[3] = *(float *)(&vy_tmp[3]);
    vy_tmp[4] = vy_on.data.range(159, 128);
    vy_off[4] = *(float *)(&vy_tmp[4]);
    vy_tmp[5] = vy_on.data.range(191, 160);
    vy_off[5] = *(float *)(&vy_tmp[5]);
    vy_tmp[6] = vy_on.data.range(223, 192);
    vy_off[6] = *(float *)(&vy_tmp[6]);
    vy_tmp[7] = vy_on.data.range(255, 224);
    vy_off[7] = *(float *)(&vy_tmp[7]);
    vy_tmp[8] = vy_on.data.range(287, 256);
    vy_off[8] = *(float *)(&vy_tmp[8]);
    vy_tmp[9] = vy_on.data.range(319, 288);
    vy_off[9] = *(float *)(&vy_tmp[9]);
    vy_tmp[10] = vy_on.data.range(351, 320);
    vy_off[10] = *(float *)(&vy_tmp[10]);
    vy_tmp[11] = vy_on.data.range(383, 352);
    vy_off[11] = *(float *)(&vy_tmp[11]);
    vy_tmp[12] = vy_on.data.range(415, 384);
    vy_off[12] = *(float *)(&vy_tmp[12]);
    vy_tmp[13] = vy_on.data.range(447, 416);
    vy_off[13] = *(float *)(&vy_tmp[13]);
    vy_tmp[14] = vy_on.data.range(479, 448);
    vy_off[14] = *(float *)(&vy_tmp[14]);
    vy_tmp[15] = vy_on.data.range(511, 480);
    vy_off[15] = *(float *)(&vy_tmp[15]);
    vy[i] = vy_off;
  }
}
void store_vtmp_for_task1(hls::stream<float8> &fifo_tmp_to_off_chip,
                          float8 vtmp[50]) {
#pragma HLS inline off
  for (int i = 0; i < 50; i++) {
#pragma HLS pipeline II = 1
    vtmp[i] = fifo_tmp_to_off_chip.read();
  }
}
void store_vtmp_for_task1(
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_to_off_chip, float8 vtmp[50]) {
#pragma HLS inline off
  for (int i = 0; i < 50; i++) {
#pragma HLS pipeline II = 1
    float8 vtmp_off;
    ap_axiu<256, 0, 0, 0> vtmp_on = fifo_tmp_to_off_chip.read();
    uint32_t vtmp_tmp[8];
    vtmp_tmp[0] = vtmp_on.data.range(31, 0);
    vtmp_off[0] = *(float *)(&vtmp_tmp[0]);
    vtmp_tmp[1] = vtmp_on.data.range(63, 32);
    vtmp_off[1] = *(float *)(&vtmp_tmp[1]);
    vtmp_tmp[2] = vtmp_on.data.range(95, 64);
    vtmp_off[2] = *(float *)(&vtmp_tmp[2]);
    vtmp_tmp[3] = vtmp_on.data.range(127, 96);
    vtmp_off[3] = *(float *)(&vtmp_tmp[3]);
    vtmp_tmp[4] = vtmp_on.data.range(159, 128);
    vtmp_off[4] = *(float *)(&vtmp_tmp[4]);
    vtmp_tmp[5] = vtmp_on.data.range(191, 160);
    vtmp_off[5] = *(float *)(&vtmp_tmp[5]);
    vtmp_tmp[6] = vtmp_on.data.range(223, 192);
    vtmp_off[6] = *(float *)(&vtmp_tmp[6]);
    vtmp_tmp[7] = vtmp_on.data.range(255, 224);
    vtmp_off[7] = *(float *)(&vtmp_tmp[7]);
    vtmp[i] = vtmp_off;
  }
}

void kernel_nlp_slr0(
    float8 vtmp_for_task1[50], float16 vA_for_task1[10400],
    float16 vA_for_task3[10400], float16 vx_for_task1[26],
    float16 vy_for_task3[26],
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S3,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_A_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_x_from_off_chip_to_S1,
    hls::stream<ap_axiu<512, 0, 0, 0>> &fifo_y_to_off_chip,
    hls::stream<ap_axiu<256, 0, 0, 0>> &fifo_tmp_to_off_chip) {
#pragma HLS INTERFACE axis port = fifo_A_from_off_chip_to_S3
#pragma HLS INTERFACE axis port = fifo_A_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_x_from_off_chip_to_S1
#pragma HLS INTERFACE axis port = fifo_y_to_off_chip
#pragma HLS INTERFACE axis port = fifo_tmp_to_off_chip
#pragma HLS INTERFACE m_axi port = vtmp_for_task1 offset = slave bundle =      \
    kernel_vtmp_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task1 offset = slave bundle =        \
    kernel_vA_for_task1
#pragma HLS INTERFACE m_axi port = vA_for_task3 offset = slave bundle =        \
    kernel_vA_for_task3
#pragma HLS INTERFACE m_axi port = vx_for_task1 offset = slave bundle =        \
    kernel_vx_for_task1
#pragma HLS INTERFACE m_axi port = vy_for_task3 offset = slave bundle =        \
    kernel_vy_for_task3
#pragma HLS INTERFACE s_axilite port = vtmp_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vA_for_task3 bundle = control
#pragma HLS INTERFACE s_axilite port = vx_for_task1 bundle = control
#pragma HLS INTERFACE s_axilite port = vy_for_task3 bundle = control
#pragma HLS DATA_PACK VARIABLE = vtmp_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task1
#pragma HLS DATA_PACK VARIABLE = vA_for_task3
#pragma HLS DATA_PACK VARIABLE = vx_for_task1
#pragma HLS DATA_PACK VARIABLE = vy_for_task3
#pragma HLS INTERFACE s_axilite port = return bundle = control
#pragma HLS dataflow
  load_vA_for_task3(fifo_A_from_off_chip_to_S3, vA_for_task3);
  load_vA_for_task1(fifo_A_from_off_chip_to_S1, vA_for_task1);
  load_vx_for_task1(fifo_x_from_off_chip_to_S1, vx_for_task1);
  store_vy_for_task3(fifo_y_to_off_chip, vy_for_task3);
  store_vtmp_for_task1(fifo_tmp_to_off_chip, vtmp_for_task1);
}
